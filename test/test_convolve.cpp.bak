#include <iostream>
#include <WTools.hpp>

///
/// \brief The accuracy required for each numerical comparison.
///
constexpr double accuracy = 1e-12;

namespace test::convolve {

    TEST_SUITE_BEGIN("convolve");

    TEST_CASE("basic delta") {

        // the size of the delta functions
        const int N = 6;

        // create two delta function signals
        const double delta1[]{1., 0., 0., 0., 0., 0};
        const double delta2[]{0., 1., 0., 0., 0., 0};

        // create FWTransform object
        FWTransform transform{N};

        // do convolutions
        const double* output = transform.convolve(delta1, delta2);

        // expected output
        const double expected[]{0., 1., 0., 0., 0., 0.};

        // let's be dumb and print it out for now
        for (int i = 0; i < N; i ++) {
            CHECK(output[i] == doctest::Approx(expected[i]).epsilon(accuracy));
        }
    }

    TEST_CASE("basic triangle") {

        // the size of the delta functions
        const int N = 5;

        // create two delta function signals
        const double delta1[]{0., 0., 1., 1., 0.};
        const double delta2[]{0., 1., 1., 0., 0.};

        // create FWTransform object
        FWTransform transform{N};

        // do convolutions
        const double* output = transform.convolve(delta1, delta2);

        // expected output
        const double expected[]{1., 0., 0., 1., 2.};

        // let's be dumb and print it out for now
        for (int i = 0; i < N; i ++) {
            CHECK(output[i] == doctest::Approx(expected[i]).epsilon(accuracy));
        }
    }


    TEST_SUITE_END();

}
